import csv
import math
import random
import copy



rr=[]
with open('dataset.csv','rb') as csvfile:
	reader=csv.reader(csvfile,delimiter=' ',quotechar='|')
	rows=[x for x in reader]
	for j in xrange(111):
		r=rows[j][0].split(',')
		rr.append(r)
rr.pop(0)
random.shuffle(rr)

NoOfFeatures=len(rr[0])
N=len(rr)
Nck=[0.0]*2
Nck1=[0.0]*2

for i in xrange(N):
	if rr[i][NoOfFeatures-1]==0:
		Nck[0]=Nck[0]+1
		Nck1[1]=Nck1[1]+1
	else:
		Nck[1]=Nck[1]+1
		Nck1[0]=Nck1[0]+1

#Without class label
Nf=[0.0]*NoOfFeatures-1
Nf1=[0.0]*NoOfFeatures-1

for i in xrange(NoOfFeatures-1):
	for t in xrange(N):
		if rr[t][i]==1:
			Nf[i]=Nf[i]+1


for i in xrange(NoOfFeatures-1):
	Nf1[i]=N-Nf[i]

Nfck=[[0.0]*NoOfFeatures-1 for i in xrange(2)]
Nf1ck=[[0.0]*NoOfFeatures-1 for i in xrange(2)]
Nfck1=[[0.0]*NoOfFeatures-1 for i in xrange(2)]
Nf1ck1=[[0.0]*NoOfFeatures-1 for i in xrange(2)]

for f in xrange(NoOfFeatures-1):
	for t in xrange(N):
		if rr[t][f]==1:
			if rr[t][NoOfFeatures-1]==0:
				Nfck[0][f]=Nfck[0][f]+1
				Nfck1[1][f]=Nfck1[1][f]+1
			else:
				Nfck[1][f]=Nfck[1][f]+1
				Nfck1[0][f]=Nfck1[0][f]+1

		else:
			if rr[t][NoOfFeatures-1]==0:
				Nf1ck[0][f]=Nf1ck[0][f]+1
				Nf1ck1[1][f]=Nf1ck1[1][f]+1
			else:
				Nf1ck[1][f]=Nf1ck[1][f]+1
				Nf1ck1[0][f]=Nf1ck1[0][f]+1


MIFCk=[[0.0]*NoOfFeatures-1 for i in xrange(2)]

for c in xrange(2):
	for f in xrange(NoOfFeatures-1):
		MIFCk[c][f]=(float(Nfck[c][f]/N)*float(math.log(float(float(N*Nfck[c][f])/float(Nf[f]*Nck[c])))))+(float(Nfck1[c][f]/N)*float(math.log(float(float(N*Nfck1[c][f])/float(Nf[f]*Nck1[c])))))+(float(Nf1ck[c][f]/N)*float(math.log(float(float(N*Nf1ck[c][f])/float(Nf1[f]*Nck[c])))))+(float(Nf1ck1[c][f]/N)*float(math.log(float(float(N*Nf1ck1[c][f])/float(Nf1[f]*Nck1[c])))))


'''
MIF=[0.0]*NoOfFeatures-1
for f in xrange(NoOfFeatures-1):
	for c in xrange(2):
		MIF[f]=MIF[f]+float(float(Nck[c])/float(N))*MIFCk[c][f]

'''
MIF={}
for f in xrange(NoOfFeatures-1):
	for c in xrange(2):
		MIF[f]=MIF[f]+float(float(Nck[c])/float(N))*MIFCk[c][f]
		
sortedMIF = [(f, MIF[f]) for f in sorted(MIF, key=MIF.get, reverse=True)]
for key, val in s:
	print key, val


